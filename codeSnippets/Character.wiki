




* Movement
{{{class="brush:c++"
void AMyCharacter::MoveForward(float AxisValue) {
	FVector Direction = FRotationMatrix(Controller->GetControlRotation()).GetScaledAxis(EAxis::X);
    AddMovementInput(Direction, AxisValue);
}

void AMyCharacter::MoveRight(float AxisValue) {
	FVector Direction = FRotationMatrix(Controller->GetControlRotation()).GetScaledAxis(EAxis::Y);
	AddMovementInput(Direction, AxisValue);
}
}}}

* Rotation
{{{class="brush:c++"
	// approach1: bind to pawn build-in functions
	void AMyPawn::SetupPlayerInputComponent(class UInputComponent* InputComponent) {
		InputComponent->BindAxis("Turn", this, &AddControllerYawInput);
		InputComponent->BindAxis("LookUp", this, &AddControllerPitchInput);
	}		
}}}

* Jump
{{{class="brush:c++"
	// approatch1 : bind to character build-in value
	void AMyCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent) {
		InputComponent->BindAction("Jump", IE_Pressed, this, &ACharacter::StartJump);
		InputComponent->BindAction("Jump", IE_Released, this, &ACharacter::StopJump);
	}	
	
	void AMyCharacter::StartJump() {
		bPressedJump = true;
	}
	
	void AMyCharacter::StopJump() {
		bPressedJump = false;
	}
}}}
